local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Define the ONLY pet models you want to spawn.
-- IMPORTANT: These names MUST match models accessible in ReplicatedStorage or elsewhere if you dynamically load them.
-- For this to work, you need to ensure models named "RaccoonPetModel" and "DragonflyPetModel"
-- are present in ReplicatedStorage on your client, or whatever location the game loads them to.
local PET_MODEL_NAMES = {
    "RaccoonPetModel",
    "DragonflyPetModel",
}

local PET_SPAWN_OFFSET = Vector3.new(3, 0, 0) -- Offset from your character to spawn the pet
local MIN_WEIGHT = 0.5   -- Minimum visual scale for weight
local MAX_WEIGHT = 2.0   -- Maximum visual scale for weight
local MIN_AGE = 0.0      -- Minimum age (baby)
local MAX_AGE = 1.0      -- Maximum age (adult/old)

local currentlyActivePets = {} -- Table to keep track of spawned pets

-- Function to apply visual characteristics based on weight and age
local function applyPetCharacteristics(petModel, weight, age)
    -- Validate inputs to ensure they are within expected ranges
    weight = math.clamp(weight, MIN_WEIGHT, MAX_WEIGHT)
    age = math.clamp(age, MIN_AGE, MAX_AGE)

    -- **Weight (Scale)**
    local scaleFactor = weight
    for _, part in ipairs(petModel:GetDescendants()) do
        if part:IsA("BasePart") then
            -- Scale each part's size based on the weight factor
            part.Size = part.Size * scaleFactor
        end
    end

    -- **Age (Visual Cue - Example: Color/Transparency/Particle)**
    if age <= 0.2 then -- Very young (baby)
        for _, part in ipairs(petModel:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 0.2 -- Make babies slightly transparent
            end
        end
        -- Add a simple particle effect for baby pets
        local babyEffect = Instance.new("ParticleEmitter")
        babyEffect.Texture = "rbxassetid://632462372" -- Example sparkle texture ID
        babyEffect.Color = ColorSequence.new(Color3.new(0.5, 1, 1), Color3.new(0.8, 1, 1)) -- Light blue/white glow
        babyEffect.Size = NumberSequence.new(0.1, 0.3)
        babyEffect.Transparency = NumberSequence.new(0, 1)
        babyEffect.Lifetime = NumberRange.new(0.5, 1.0)
        babyEffect.Rate = 10
        babyEffect.Acceleration = Vector3.new(0, 2, 0) -- Float upwards
        babyEffect.Enabled = true
        babyEffect.Parent = petModel.PrimaryPart or petModel:FindFirstChildOfClass("BasePart") -- Attach to primary part or any part
    elseif age >= 0.8 then -- Older pets
        for _, part in ipairs(petModel:GetDescendants()) do
            if part:IsA("BasePart") then
                local originalColor = part.Color
                -- Desaturate and darken slightly for an aged look
                part.Color = Color3.new(originalColor.R * 0.7, originalColor.G * 0.7, originalColor.B * 0.7)
            end
        end
    end
end

-- Function to spawn a visual pet
-- Parameters: petName (string), weight (number), age (number)
local function spawnVisualPet(petName, weight, age)
    local character = LocalPlayer.Character
    if not character or not character.PrimaryPart then
        warn("Character or PrimaryPart not found! Cannot spawn pet.")
        return
    end

    -- Attempt to find the pet model in ReplicatedStorage
    local petModelTemplate = ReplicatedStorage:FindFirstChild(petName)
    if not petModelTemplate then
        warn("Pet model '" .. petName .. "' not found in ReplicatedStorage! Ensure the name is correct and it's accessible.")
        -- Fallback: Create a simple placeholder if the model isn't found
        local placeholder = Instance.new("Part")
        placeholder.Size = Vector3.new(1,1,1)
        placeholder.Shape = Enum.PartType.Ball
        placeholder.BrickColor = BrickColor.new("Really red")
        placeholder.Name = "PlaceholderPet"
        petModelTemplate = Instance.new("Model")
        placeholder.Parent = placeholder -- Parent the part to itself (this will be fixed below)
        petModelTemplate.Name = "PlaceholderPetModel"
        petModelTemplate.PrimaryPart = placeholder
        -- Correcting the parenting for the placeholder model
        placeholder.Parent = petModelTemplate
    end

    local newPet = petModelTemplate:Clone()
    newPet.Parent = workspace -- Spawn the pet directly into the workspace for your view

    -- Apply visual characteristics before positioning for accurate placement
    applyPetCharacteristics(newPet, weight, age)

    -- Position the pet near the player's character
    local primaryPartSizeY = (newPet.PrimaryPart and newPet.PrimaryPart.Size.Y) or 1 -- Default to 1 if no primary part
    local playerHeightOffset = character.PrimaryPart.Size.Y / 2
    local petHeightOffset = primaryPartSizeY / 2
    
    local spawnCFrame = character.PrimaryPart.CFrame * CFrame.new(PET_SPAWN_OFFSET.X, playerHeightOffset - petHeightOffset, PET_SPAWN_OFFSET.Z)
    newPet:SetPrimaryPartCFrame(spawnCFrame)

    local petPrimaryPart = newPet.PrimaryPart
    if petPrimaryPart then
        -- Simple pet following behavior (purely visual, only for your client)
        local followConnection = RunService.Heartbeat:Connect(function()
            if character and character.PrimaryPart and newPet.Parent == workspace then
                local targetPosition = character.PrimaryPart.Position + PET_SPAWN_OFFSET
                -- Use Lerp for smoother visual following
                petPrimaryPart.CFrame = petPrimaryPart.CFrame:Lerp(CFrame.new(targetPosition), 0.1)
            else
                -- Clean up the pet if the character disappears or pet is removed
                if currentlyActivePets[newPet] then
                    currentlyActivePets[newPet]:Disconnect()
                    currentlyActivePets[newPet] = nil
                    if newPet and newPet.Parent then
                        newPet:Destroy()
                    end
                end
            end
        end)
        currentlyActivePets[newPet] = followConnection
    end

    print("Spawned visual pet: " .. petName .. " with weight: " .. weight .. " and age: " .. age)
    return newPet
end
